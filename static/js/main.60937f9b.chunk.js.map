{"version":3,"sources":["serviceWorker.js","SamNavBar.js","HomeScreen.js","StatusScreen.js","OSCScreen.js","index.js"],"names":["Boolean","window","location","hostname","match","SamNavBar","_this","this","react_default","a","createElement","Navbar_default","bg","expand","Brand","href","onClick","props","Toggle","aria-controls","Collapse","id","Nav_default","className","Link","NavDropdown_default","title","Item","Divider","Form_default","inline","FormControl_default","type","placeholder","React","Component","HomeScreen","Alert_default","variant","Heading","Container_default","Row_default","Col_default","StatusScreen","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","linuxVersion","serverUptime","samServerVersion","samServerStatus","core1OSCStatus","core2OSCStatus","core1State","core1Mode","core1Application","core2State","core2Mode","_this2","console","log","fetch","serverURL","then","response","json","data","setState","version","upTime","serverVersion","catch","error","xs","ButtonToolbar_default","Button_default","disabled","OSCScreen","imgURL","coreID","src","alt","LocalFiltersScreen","ImportFiltersScreen","FilterStoreScreen","AboutScreen","SamPage","pageAction","menuOption","bodyType","src_HomeScreen","src_StatusScreen","src_LocalFiltersScreen","src_ImportFiltersScreen","src_FilterStoreScreen","src_OSCScreen","src_AboutScreen","src_SamNavBar","i","handleClick","ReactDOM","render","src_SamPage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60937f9b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* SAM-SAM Webserver\r\n * Copyright Analog Devices Inc. 2019, All Rights Reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport './index.css';\r\n\r\n/* Bootstrap imports */\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\n\r\nclass SamNavBar extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#home\" onClick={() => this.props.onClick(\"home\")}>SAM-SAM</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#home\" onClick={() => this.props.onClick(\"home\")}>Home</Nav.Link>\r\n                        <Nav.Link href=\"#status\" onClick={() => this.props.onClick(\"status\")}>Processor Status</Nav.Link>\r\n                        <NavDropdown title=\"Filters\" id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item href=\"#filterActions/localFilters\" onClick={() => this.props.onClick(\"localFilters\")}>Local Filters</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#filterActions/importFilters\"onClick={() => this.props.onClick(\"importFilters\")}>Import Filters</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#filterActions/filterStore\" onClick={() => this.props.onClick(\"filterStore\")}>SAM Filter Store</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"#filterActions/OSC1\" onClick={() => this.props.onClick(\"OSC1\")}>Core 1 Filter Settings</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#filterActions/OSC2\"onClick={() => this.props.onClick(\"OSC2\")}>Core 2 Filter Settings</NavDropdown.Item>\r\n                        \r\n                        </NavDropdown>\r\n                        <Nav.Link href=\"#history\" onClick={() => this.props.onClick(\"history\")}>History and Monitoring</Nav.Link>\r\n                        <Nav.Link href=\"#about\" onClick={() => this.props.onClick(\"about\")}>About</Nav.Link>\r\n                    </Nav>\r\n                    <Form inline>\r\n                        <FormControl type=\"text\" placeholder=\"Search filters\" className=\"mr-sm-2\" />\r\n                        <button type=\"submit\">Search</button>\r\n                    </Form>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default SamNavBar;","/* SAM-SAM Webserver\r\n * Copyright Analog Devices Inc. 2019, All Rights Reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport './index.css';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nclass HomeScreen extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Alert variant=\"primary\">\r\n                <Alert.Heading>Welcome to the SHARC Audio Module System Augmentation  and Management (SAM-SAM)</Alert.Heading>\r\n                <hr />\r\n                <p className=\"mb-0\">\r\n                    This server is currently running on your SAM board and is provided as a tool to assist you in the rapid prototyping and evaluation of audio filters running on the SHARC cores of the processor.<br />\r\n                    Use the menu items above to download filters and load them to the SHARC cores. Use Open Stage Control to manipulate the filters in real-time.\r\n                </p>\r\n            </Alert>\r\n            <Container>\r\n                <Row>\r\n                    <Col><i>Process Status</i></Col>\r\n                    <Col>Provides the status of the processor cores. Lists which applications are running on the SHARC cores and whether each core is active<hr /></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><i>Filters > Local Filters</i></Col>\r\n                    <Col>Management of audio filters currently stored on the SAM. This includes loading and removing filters<hr /></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><i>Filters > Import Filters</i></Col>\r\n                    <Col>Upload new user-created filters to the SAM<hr /><hr /></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><i>Filters > SAM Filter Store</i></Col>\r\n                    <Col>View the ADI provided online repository of additional audio effects and filters for the SAM<hr /></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><i>Core 1 Filter Settings</i></Col>\r\n                    <Col>Use Open Stage Control to manipulate the parameters of the algorithm running on the SHARC 1 core<hr /></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><i>Core 2 Filter Settings</i></Col>\r\n                    <Col>Use Open Stage Control to manipulate the parameters of the algorithm running on the SHARC 2 core<hr /></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col><i>History and Monitoring</i></Col>\r\n                    <Col>View log files and errors status for support and maintenance of the device<hr /></Col>\r\n                </Row>\r\n            </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomeScreen;","/* SAM-SAM Webserver\r\n * Copyright Analog Devices Inc. 2019, All Rights Reserved.\r\n */\r\n\r\nimport React from 'react';\r\nimport './index.css';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n/* CORTEX-A:\r\n    uptime:\r\n    OSC for core1 running|halted|unkown | disable\r\n    VST connection for core 1  enable | disable\r\n    OSC for core2 running disabled\r\n  SHARCS:\r\n    running|idle|unknown\r\n    last loaded filter\r\n\r\n*/\r\n\r\nconst serverURL = \"http://thinkbox.spd.analog.com\";\r\nconst serverPort = \"3003\";\r\n\r\nclass StatusScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            linuxVersion: \"Loading\",\r\n            serverUptime: \"Loading\",\r\n            samServerVersion: \"Loading\",\r\n            samServerStatus: \"Loading\",\r\n            core1OSCStatus: \"Loading\",\r\n            core2OSCStatus: \"Loading\",\r\n            core1State: \"Loading\",\r\n            core1Mode: \"Loading\",\r\n            core1Application: \"Loading\",\r\n            core2State: \"Loading\",\r\n            core2Mode: \"Loading\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Requestiong sysinfo from server\");\r\n        fetch(serverURL+\":\"+serverPort+\"/sysinfo\")\r\n            \r\n            .then(response => response.json())\r\n            .then(data => this.setState({\r\n                linuxVersion: data.version,\r\n                serverUptime: data.upTime,\r\n                samServerVersion: data.serverVersion\r\n            }))\r\n            .catch(function(error) {\r\n                console.log(\"The fetch request failed: \", error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <Alert variant=\"primary\"><Alert.Heading>Core0 (ARM Cortex-A5) running Linux</Alert.Heading></Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>Linux Version:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                        <Alert variant=\"secondary\">{this.state.linuxVersion}</Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>Uptime:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                        <Alert variant=\"secondary\">{this.state.serverUptime}</Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>SHARC Loader Service:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <ButtonToolbar>\r\n                                <Button variant=\"success\">\r\n                                    Active\r\n                                </Button>\r\n                                \r\n                                <Button variant=\"secondary\" disabled>\r\n                                    Inactive\r\n                                </Button>\r\n                                \r\n                                <Button href=\"#\" variant=\"primary\">\r\n                                    Restart\r\n                                </Button>\r\n                            </ButtonToolbar>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>Server Version:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                        <Alert variant=\"secondary\">{this.state.samServerVersion}</Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>Core 1 Open Stage Control Service:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <ButtonToolbar>\r\n                                <Button variant=\"success\">\r\n                                    Active\r\n                                </Button>\r\n                                \r\n                                <Button variant=\"secondary\" disabled>\r\n                                    Inactive\r\n                                </Button>\r\n                                \r\n                                <Button href=\"#\" variant=\"primary\">\r\n                                    Restart\r\n                                </Button>\r\n                            </ButtonToolbar>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>Core 2 Open Stage Control Service:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <ButtonToolbar>\r\n                                <Button variant=\"success\" disabled>\r\n                                    Active\r\n                                </Button>\r\n                                \r\n                                <Button variant=\"danger\">\r\n                                    Inactive\r\n                                </Button>\r\n                                \r\n                                <Button href=\"#\" variant=\"primary\">\r\n                                    Restart\r\n                                </Button>\r\n                            </ButtonToolbar>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <Alert variant=\"primary\"><Alert.Heading>Core1 (SHARC+)</Alert.Heading></Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>SHARC State:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <ButtonToolbar>\r\n                                <Button variant=\"success\">\r\n                                    Active\r\n                                </Button>\r\n                                \r\n                                <Button variant=\"secondary\" disabled>\r\n                                    Inactive\r\n                                </Button>\r\n                                \r\n                                <Button href=\"#\" variant=\"primary\">\r\n                                    Restart\r\n                                </Button>\r\n                            </ButtonToolbar>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>SHARC Mode:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                        <Alert variant=\"secondary\">Audio Input</Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>Application:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                        <Alert variant=\"secondary\">Customer User Filter #1</Alert>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <Alert variant=\"primary\"><Alert.Heading>Core2 (SHARC+)</Alert.Heading></Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>SHARC State:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <ButtonToolbar>\r\n                                <Button variant=\"success\">\r\n                                    Active\r\n                                </Button>\r\n                                \r\n                                <Button variant=\"secondary\" disabled>\r\n                                    Inactive\r\n                                </Button>\r\n                                \r\n                                <Button href=\"#\" variant=\"primary\">\r\n                                    Restart\r\n                                </Button>\r\n                            </ButtonToolbar>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>SHARC Mode:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                        <Alert variant=\"secondary\">Audio Output</Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <b>Application:</b>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                        <Alert variant=\"secondary\">Equalizer</Alert>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StatusScreen;","import React from 'react';\r\nimport './index.css';\r\n\r\nclass OSCScreen extends React.Component {\r\n    render() {\r\n        let imgURL = \"\";\r\n        if ( this.props.coreID === 1 ) {\r\n            imgURL = \"https://d2.alternativeto.net/dist/s/open-stage-control_607015_full.png?format=jpg&width=1600&height=1600&mode=min&upscale=false\";\r\n        } else {\r\n            imgURL = \"https://user-images.githubusercontent.com/5261671/30510969-39451104-9acf-11e7-8ee0-6e93fa34464d.png\";\r\n        }\r\n        return (\r\n            <div><img src={imgURL} alt=\"example\"/></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default OSCScreen;","/* SAM-SAM Webserver\n * Copyright Analog Devices Inc. 2019, All Rights Reserved.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n/* SAM Components */\nimport SamNavBar from './SamNavBar';\nimport HomeScreen from './HomeScreen';\nimport StatusScreen from './StatusScreen';\nimport OSCScreen from './OSCScreen';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\n\nclass LocalFiltersScreen extends React.Component {\n    render() {\n        return (\n            <div>TBD: Filters</div>\n        )\n    }\n}\n\nclass ImportFiltersScreen extends React.Component {\n    render() {\n        return (\n            <div>TBD: Import Filters</div>\n        )\n    }\n}\n\nclass FilterStoreScreen extends React.Component {\n    render() {\n        return (\n            <div>TBD: Filter Store</div>\n        )\n    }\n}\n\n\n\nclass AboutScreen extends React.Component {\n    render() {\n        return (\n            <div>TBD: About</div>\n        )\n    }\n}\n\nclass SamPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pageAction: \"home\",\n        }\n    }\n\n    handleClick(menuOption) {\n        console.log(\"User clicked \"+menuOption);\n        this.setState({\n            pageAction: menuOption\n        })\n    }\n\n    render() {\n        let bodyType = <HomeScreen />;\nconsole.log(\"Render() called for SamPage\");\n        switch (this.state.pageAction) {\n            case 'home':\n                bodyType = <HomeScreen />;\n                break;\n            case 'status':\n                bodyType = <StatusScreen />;\n                break;\n            case 'localFilters':\n                bodyType = <LocalFiltersScreen />;\n                break;\n            case 'importFilters':\n                bodyType = <ImportFiltersScreen />;\n                break;\n            case 'filterStore':\n                bodyType = <FilterStoreScreen />;\n                break;\n            case 'OSC1':\n                bodyType = <OSCScreen coreID=\"1\"/>;\n                break;\n            case 'OSC2':\n                bodyType = <OSCScreen coreID=\"2\"/>;\n                break;\n            case 'about':\n                bodyType = <AboutScreen />;\n                break;\n            default:\n                console.log(\"Error: Unknown action: \"+this.props.pageAction);\n                break;\n        }\n        return (\n            <div>\n                <SamNavBar onClick={i => this.handleClick(i)} />\n                {bodyType}\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<SamPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}